#include <SPI.h>
#include <MFRC522.h>

#define RST_PIN 9
#define SS_PIN 10
#define MOTION_SENSOR_PIN 3
#define MOTOR_OPEN_PIN 6
#define MOTOR_CLOSE_PIN 7
#define OPEN_DURATION 3000
#define CLOSE_DURATION 4000 // Увеличили время закрытия до 4 секунд

MFRC522 rfid(SS_PIN, RST_PIN);
String allowedCards[] = {"144DB5A7"};
int numAllowedCards = sizeof(allowedCards) / sizeof(allowedCards[0]);

enum GateState {
  STATE_IDLE,
  STATE_OPENING,
  STATE_OPEN,
  STATE_CLOSING
};

volatile bool motionDetected = false;
GateState currentState = STATE_IDLE;
unsigned long operationStartTime = 0;

void setup() {
  Serial.begin(9600);
  SPI.begin();
  rfid.PCD_Init();
  pinMode(MOTION_SENSOR_PIN, INPUT);
  pinMode(MOTOR_OPEN_PIN, OUTPUT);
  pinMode(MOTOR_CLOSE_PIN, OUTPUT);
  attachInterrupt(digitalPinToInterrupt(MOTION_SENSOR_PIN), motionInterrupt, CHANGE);
  Serial.println("Поднесите карту к считывателю...");
}

void loop() {
  switch(currentState) {
    case STATE_IDLE:
      handleIdle();
      break;
    case STATE_OPENING:
      handleOpening();
      break;
    case STATE_OPEN:
      handleOpen();
      break;
    case STATE_CLOSING:
      handleClosing();
      break;
  }
}

void handleIdle() {
  if (checkRFID()) {
    currentState = STATE_OPENING;
    operationStartTime = millis();
  }
}

bool checkRFID() {
  if (rfid.PICC_IsNewCardPresent() && rfid.PICC_ReadCardSerial()) {
    String cardID = getCardID();
    Serial.print("UID метки: ");
    Serial.println(cardID);
    
    for (int i = 0; i < numAllowedCards; i++) {
      if (cardID == allowedCards[i]) {
        Serial.println("Доступ разрешен!");
        rfid.PICC_HaltA();
        rfid.PCD_StopCrypto1();
        return true;
      }
    }
    Serial.println("Доступ запрещен!");
    rfid.PICC_HaltA();
    rfid.PCD_StopCrypto1();
  }
  return false;
}

void handleOpening() {
  digitalWrite(MOTOR_OPEN_PIN, 1);
  digitalWrite(MOTOR_CLOSE_PIN, 165);
  
  if (millis() - operationStartTime >= OPEN_DURATION) {
    stopMotor();
    currentState = STATE_OPEN;
    Serial.println("Ворота открыты");
  }
}

void handleOpen() {
  if (!motionDetected) {
    currentState = STATE_CLOSING;
    operationStartTime = millis();
    Serial.println("Начинаем закрытие");
  }
}

void handleClosing() {
  digitalWrite(MOTOR_CLOSE_PIN, 0);
  digitalWrite(MOTOR_OPEN_PIN, 165);
  
  if (millis() - operationStartTime >= CLOSE_DURATION) {
    stopMotor();
    currentState = STATE_IDLE;
    Serial.println("Ворота закрыты. Поднесите карту к считывателю...");
  }
}

void stopMotor() { 
  digitalWrite(MOTOR_OPEN_PIN, LOW);
  digitalWrite(MOTOR_CLOSE_PIN, LOW);
}

String getCardID() {
  String cardID = "";
  for (byte i = 0; i < rfid.uid.size; i++) {
    cardID.concat(String(rfid.uid.uidByte[i] < 0x10 ? "0" : ""));
    cardID.concat(String(rfid.uid.uidByte[i], HEX));
  }
  cardID.toUpperCase();
  return cardID;
}

void motionInterrupt() {
  motionDetected = digitalRead(MOTION_SENSOR_PIN);
  Serial.print("Движение ");
  Serial.println(motionDetected ? "обнаружено" : "закончилось");
} 
